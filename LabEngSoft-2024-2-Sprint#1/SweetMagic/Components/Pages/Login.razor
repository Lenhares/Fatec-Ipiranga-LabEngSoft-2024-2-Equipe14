@page "/"
@rendermode InteractiveServer
@layout SweetMagic.Components.Layout.MainLayout
@using SweetMagic.Models;
@using SweetMagic.Services;
@using Microsoft.JSInterop;
@using Microsoft.AspNetCore.Components.Forms;

<PageTitle>Sweet Magic - Login</PageTitle>
<div class="login-page">
    <div class="login-box">
        <a href="/">
            <img src="assets/images/logo.png" alt="Logo" class="logo">
        </a>
        <h2>Entrar</h2>
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label class="form-label" for="email">E-mail</label>
                <InputText class="form-control" id="email" @bind-Value="loginModel.Email" type="email" required />
            </div>

            <div class="form-group">
                <label class="form-label" for="password">Senha</label>
                <InputText class="form-control" id="password" @bind-Value="loginModel.Password" type="password" required />
            </div>

          @*   <div class="form-group">
                <InputCheckbox @bind-Value="loginModel.RememberMe" />
                <label class="form-label">Salvar login</label>
            </div> *@

            <button class="loginBtn" type="submit">Login</button>
        </EditForm>
        @if (!string.IsNullOrEmpty(errorMessage)) {
            <div class="error-message">@errorMessage</div>
        }
        <a class="cadastrese" href="/cadastro">Cadastrar-se</a>
    </div>
</div>

@code {
    [CascadingParameter]
    public SweetMagic.Components.Layout.MainLayout? Layout { get; set; }

    private LoginModel loginModel = new LoginModel();
    private string? errorMessage;  // Nullable type for error message

    [Inject]
    public UserService? UserService { get; set; }  // Nullable UserService

    [Inject]
    private IJSRuntime? JS { get; set; } // Nullable IJS Runtime

    private async Task HandleLogin()
    {
        // Authenticate user using UserService
        bool isAuthenticated = await UserService!.LoginUserAsync(loginModel.Email!, loginModel.Password!);

        if (isAuthenticated)
        {
            Layout!.loggedIn();

            if (loginModel.RememberMe)
            {
                await SetRememberUserCookie(loginModel.Email!);
            }
            errorMessage = null; // Clear error message on successful login
        }
        else
        {
            // Show an error message if authentication fails
            errorMessage = "Autenticação falhou. Verifique seu e-mail e senha.";
        }
    }

    private async Task SetRememberUserCookie(string email) {
        await JS!.InvokeVoidAsync("localStorage.setItem", "savedEmail", email);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            await LoadSavedEmail();
        }
    }

    private async Task LoadSavedEmail() {
        var savedEmail = await JS!.InvokeAsync<string>("localStorage.getItem", "savedEmail");
        if (!string.IsNullOrEmpty(savedEmail)) {
            loginModel.Email = savedEmail;
            loginModel.RememberMe = true;
        }
    }
}